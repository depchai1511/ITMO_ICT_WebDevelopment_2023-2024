{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket host = 'localhost' port = 4000 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 UDP s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 print(\"Server listening on port\", port) try: while True: mess, addr = s.recvfrom(1024) # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 mess = mess.decode(\"utf-8\") # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0439\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 clientMsg = \"Message from Client: {}\".format(mess) clientIP = \"Client IP Address: {}\".format(addr) print(clientMsg) print(clientIP) s.sendto(b'Hello client!', addr) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 except KeyboardInterrupt: # \u041f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 Ctrl+C pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket host = 'localhost' # \u0425\u043e\u0441\u0442 (\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440) port = 4000 # \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def main(): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 UDP s.connect((host, port)) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c try: while True: user_input = input('Do you want to send a message to the server? (y/n)') # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_input = user_input.lower() if user_input == 'n': break s.send(b\"Hello, server\") # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 reply_message = s.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print(f\"Server reply: {reply_message}\") # \u0412\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d except KeyboardInterrupt: pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"task1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"task1/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"task1/#_2","text":"import socket host = 'localhost' port = 4000 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 UDP s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 print(\"Server listening on port\", port) try: while True: mess, addr = s.recvfrom(1024) # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 mess = mess.decode(\"utf-8\") # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0439\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 clientMsg = \"Message from Client: {}\".format(mess) clientIP = \"Client IP Address: {}\".format(addr) print(clientMsg) print(clientIP) s.sendto(b'Hello client!', addr) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 except KeyboardInterrupt: # \u041f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 Ctrl+C pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"task1/#_3","text":"import socket host = 'localhost' # \u0425\u043e\u0441\u0442 (\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440) port = 4000 # \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def main(): s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 UDP s.connect((host, port)) # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c try: while True: user_input = input('Do you want to send a message to the server? (y/n)') # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_input = user_input.lower() if user_input == 'n': break s.send(b\"Hello, server\") # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 reply_message = s.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print(f\"Server reply: {reply_message}\") # \u0412\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d except KeyboardInterrupt: pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"task1/#_4","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u201c\u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438\u201d. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket host = 'localhost' port = 4000 def calc(a, b, h): return (a + b) // 2 * h # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP-\u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(1) # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u0442\", port) try: while True: client, _ = s.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 mess = client.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 clientMsg = \"Message from client: {}\".format(mess) a, b, h = map(int, mess.split(',')) # \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f print(clientMsg) area = calc(a, b, h) # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 client.send(str(area).encode(\"utf-8\")) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 except KeyboardInterrupt: # \u041f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 Ctrl+C pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430:\", str(e)) finally: s.close() if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket host = 'localhost' port = 4000 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP-\u0441\u043e\u043a\u0435\u0442\u0430 s.connect((host, port)) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 try: while True: user_input = input('Do you want to send a message to the server? (y/n)') # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_input = user_input.lower() if user_input == 'n': break a = input(\"Enter the larger base of the trapezoid: \") b = input(\"Enter the smaller base of the trapezoid: \") h = input(\"Enter the height of the trapezoid: \") message = a + \",\" + b + \",\" + h # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f s.send(message.encode(\"utf-8\")) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443 reply_message = s.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print(f\"Area is: {reply_message}\") # \u0412\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c) except KeyboardInterrupt: pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"task2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u201c\u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438\u201d.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"task2/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"task2/#_2","text":"import socket host = 'localhost' port = 4000 def calc(a, b, h): return (a + b) // 2 * h # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP-\u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(1) # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u0442\", port) try: while True: client, _ = s.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 mess = client.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 clientMsg = \"Message from client: {}\".format(mess) a, b, h = map(int, mess.split(',')) # \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f print(clientMsg) area = calc(a, b, h) # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 client.send(str(area).encode(\"utf-8\")) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 except KeyboardInterrupt: # \u041f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 Ctrl+C pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430:\", str(e)) finally: s.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"task2/#_3","text":"import socket host = 'localhost' port = 4000 def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP-\u0441\u043e\u043a\u0435\u0442\u0430 s.connect((host, port)) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 try: while True: user_input = input('Do you want to send a message to the server? (y/n)') # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432\u0432\u043e\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user_input = user_input.lower() if user_input == 'n': break a = input(\"Enter the larger base of the trapezoid: \") b = input(\"Enter the smaller base of the trapezoid: \") h = input(\"Enter the height of the trapezoid: \") message = a + \",\" + b + \",\" + h # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f s.send(message.encode(\"utf-8\")) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443 reply_message = s.recv(1024).decode(\"utf-8\") # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print(f\"Area is: {reply_message}\") # \u0412\u044b\u0432\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c) except KeyboardInterrupt: pass except Exception as e: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"An error occurred:\", str(e)) finally: s.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"task2/#_4","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket host = 'localhost' port = 4000 def get_response_html(): try: with open(\"index.html\", \"r\") as file: html_content = file.read() except FileNotFoundError: html_content = \"<html><body><h1>File index.html isn't found</h1></body></html>\" response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(html_content)}\\r\\n\\r\\n{html_content}\" return response def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(1) # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"Server listening on port\", port) while True: client, addr = s.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(f\"Connection from {addr}\") request = client.recv(1024).decode('utf-8') # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if request: response = get_response_html() # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 client.send(response.encode('utf-8')) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c if __name__ == \"__main__\": main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"task3/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"task3/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"task3/#_2","text":"import socket host = 'localhost' port = 4000 def get_response_html(): try: with open(\"index.html\", \"r\") as file: html_content = file.read() except FileNotFoundError: html_content = \"<html><body><h1>File index.html isn't found</h1></body></html>\" response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(html_content)}\\r\\n\\r\\n{html_content}\" return response def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(1) # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 print(\"Server listening on port\", port) while True: client, addr = s.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(f\"Connection from {addr}\") request = client.recv(1024).decode('utf-8') # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if request: response = get_response_html() # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 client.send(response.encode('utf-8')) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"task3/#_3","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import threading host = 'localhost' port = 4000 clients = [] client_names = [] def broadcast(message, sender): \"\"\"\u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c (\u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f)\"\"\" for client in clients: if client != sender: client.send(message) def handle_client(client): \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\" while True: try: message = client.recv(1024) if not message: raise Exception else: broadcast(message, client) except: # \u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 index = clients.index(client) clients.remove(client) client.close() name = client_names[index] client_names.remove(name) broadcast(f'{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\\n'.encode('utf-8'), None) break def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(10) # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 10) print(\"Server listening on port\", port) try: \"\"\"\u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"\"\" while True: client, addr = s.accept() clientMsg = \"New Client address: {}\".format(addr) print(clientMsg) client.send('NAME'.encode('utf-8')) name = client.recv(1024).decode('utf-8') client_names.append(name) clients.append(client) print(f'New client name: {name}') broadcast(f'{name} has join the chat.\\n'.encode('utf-8'), None) client.send('Connection successful! You have joined the chat.'.encode('utf-8')) thread = threading.Thread(target=handle_client, args=(client,)) thread.start() except KeyboardInterrupt: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u044f Ctrl+C pass except Exception as e: print(\"An error occurred:\", str(e)) finally: s.close() if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket import threading import sys host = 'localhost' # \u0425\u043e\u0441\u0442 (\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440) port = 4000 # \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 def receive_messages(): \"\"\"\u041f\u0440\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"\"\" while True: try: message = client_socket.recv(1024).decode('utf-8') print(message) except: # \u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f print('An error occurred while receiving messages.') client_socket.close() def send_messages(): \"\"\"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\"\"\" while True: try: message = input() client_socket.send(message.encode('utf-8')) except KeyboardInterrupt: # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 Ctrl+C # client_socket.close() client_socket.close() def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0432\u0430 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u043c\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 receive_thread = threading.Thread(target=receive_messages) receive_thread.start() send_thread = threading.Thread(target=send_messages) send_thread.start() if __name__ == \"__main__\": main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"task4/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"task4/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"task4/#_2","text":"import socket import threading host = 'localhost' port = 4000 clients = [] client_names = [] def broadcast(message, sender): \"\"\"\u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c (\u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f)\"\"\" for client in clients: if client != sender: client.send(message) def handle_client(client): \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\" while True: try: message = client.recv(1024) if not message: raise Exception else: broadcast(message, client) except: # \u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 index = clients.index(client) clients.remove(client) client.close() name = client_names[index] client_names.remove(name) broadcast(f'{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\\n'.encode('utf-8'), None) break def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 s.bind((host, port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 s.listen(10) # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 10) print(\"Server listening on port\", port) try: \"\"\"\u041d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"\"\" while True: client, addr = s.accept() clientMsg = \"New Client address: {}\".format(addr) print(clientMsg) client.send('NAME'.encode('utf-8')) name = client.recv(1024).decode('utf-8') client_names.append(name) clients.append(client) print(f'New client name: {name}') broadcast(f'{name} has join the chat.\\n'.encode('utf-8'), None) client.send('Connection successful! You have joined the chat.'.encode('utf-8')) thread = threading.Thread(target=handle_client, args=(client,)) thread.start() except KeyboardInterrupt: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u044f Ctrl+C pass except Exception as e: print(\"An error occurred:\", str(e)) finally: s.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"task4/#_3","text":"import socket import threading import sys host = 'localhost' # \u0425\u043e\u0441\u0442 (\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440) port = 4000 # \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 def receive_messages(): \"\"\"\u041f\u0440\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\"\"\" while True: try: message = client_socket.recv(1024).decode('utf-8') print(message) except: # \u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f print('An error occurred while receiving messages.') client_socket.close() def send_messages(): \"\"\"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\"\"\" while True: try: message = input() client_socket.send(message.encode('utf-8')) except KeyboardInterrupt: # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 Ctrl+C # client_socket.close() client_socket.close() def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0432\u0430 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u043c\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 receive_thread = threading.Thread(target=receive_messages) receive_thread.start() send_thread = threading.Thread(target=send_messages) send_thread.start() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"task4/#_4","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412\u044b\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import sys class MyHTTPServer: def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.grades = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a self.subjects = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 def serve_forever(self): serv_sock = socket.socket( socket.AF_INET, # \u0421\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432 \u0430\u0434\u0440\u0435\u0441\u0430\u0446\u0438\u0438 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 IPv4 socket.SOCK_STREAM, # \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 proto=0 ) try: serv_sock.bind((self._host, self._port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 serv_sock.listen() # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: conn, _ = serv_sock.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f try: self.serve_client(conn) # \u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 except Exception as e: print('Client serving failed', e) finally: serv_sock.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 def serve_client(self, conn): try: req = self.parse_request(conn) # \u0420\u0430\u0437\u0431\u043e\u0440 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 if req.method == 'GET': resp = self.handle_get_request(req) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 elif req.method == 'POST': resp = self.handle_post_request(req) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 else: resp = self.create_response(405, 'Method Not Allowed', 'Only GET and POST methods are supported.') self.send_response(conn, resp) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn): request_data = b'' while b'\\r\\n\\r\\n' not in request_data: data = conn.recv(1024) # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 if not data: break request_data += data if not request_data: raise ValueError('Invalid request') request_lines = request_data.decode('utf-8').split('\\r\\n') # \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 method, path, _ = request_lines[0].split(' ') # \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438 \u043f\u0443\u0442\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 headers = {} for line in request_lines[1:]: if ':' in line: key, value = line.split(':', 1) headers[key.strip()] = value.strip() params = ( {p.split(\"=\")[0]: p.split(\"=\")[1] for p in path.split(\"?\")[1].split(\"&\")} # \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 if \"?\" in path else None ) print(params) return HTTPRequest(method, path.split(\"?\")[0], headers, params) def handle_get_request(self, req): if req.path == '/': response_body = '<html><body><h1>List of subjects</h1><ul>{}</ul></body></html>' items = ''.join('<li>{} - {}</li>'.format(subject, grade) for subject, grade in zip(self.subjects, self.grades)) print(self.subjects) response_body = response_body.format(items) return self.create_response(200, 'OK', response_body) else: return self.create_response(404, 'Not Found', 'Page not found') def handle_post_request(self, req): if req.path == '/record': self.grades.append(req.params.get(\"grade\")) # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a self.subjects.append(req.params.get(\"subject\")) # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a print(self.subjects) return self.create_response(200, 'OK', 'Record saved') else: return self.create_response(404, 'Not Found', 'Page not found') def create_response(self, status_code, status_text, body): response = f\"HTTP/1.1 {status_code} {status_text}\\r\\n\" response += f\"Server: {self._server_name}\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += f\"Content-Length: {len(body)}\\r\\n\" response += \"\\r\\n\" response += body return response.encode('utf-8') def send_response(self, conn, resp): conn.sendall(resp) def send_error(self, conn, err): error_message = f\"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\nError: {err}\" conn.sendall(error_message.encode('utf-8')) class HTTPRequest: def __init__(self, method, path, headers, params): self.method = method # \u041c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.path = path # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.headers = headers # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.params = params # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 def read_body(self, length): body = b'' while len(body) < length: data = self.conn.recv(length - len(body)) if not data: break body += data return body.decode('utf-8') if __name__ == '__main__': host = 'localhost' port = 4000 name = 'test' serv = MyHTTPServer(host, port, name) print(\"Server listening on port\", port) try: serv.serve_forever() except KeyboardInterrupt: pass \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"task5/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412\u044b\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"task5/#_1","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"task5/#_2","text":"import socket import sys class MyHTTPServer: def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.grades = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a self.subjects = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 def serve_forever(self): serv_sock = socket.socket( socket.AF_INET, # \u0421\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432 \u0430\u0434\u0440\u0435\u0441\u0430\u0446\u0438\u0438 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 IPv4 socket.SOCK_STREAM, # \u041f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 proto=0 ) try: serv_sock.bind((self._host, self._port)) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 serv_sock.listen() # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: conn, _ = serv_sock.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f try: self.serve_client(conn) # \u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 except Exception as e: print('Client serving failed', e) finally: serv_sock.close() # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 def serve_client(self, conn): try: req = self.parse_request(conn) # \u0420\u0430\u0437\u0431\u043e\u0440 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 if req.method == 'GET': resp = self.handle_get_request(req) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 elif req.method == 'POST': resp = self.handle_post_request(req) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 else: resp = self.create_response(405, 'Method Not Allowed', 'Only GET and POST methods are supported.') self.send_response(conn, resp) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn): request_data = b'' while b'\\r\\n\\r\\n' not in request_data: data = conn.recv(1024) # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 if not data: break request_data += data if not request_data: raise ValueError('Invalid request') request_lines = request_data.decode('utf-8').split('\\r\\n') # \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 method, path, _ = request_lines[0].split(' ') # \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438 \u043f\u0443\u0442\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 headers = {} for line in request_lines[1:]: if ':' in line: key, value = line.split(':', 1) headers[key.strip()] = value.strip() params = ( {p.split(\"=\")[0]: p.split(\"=\")[1] for p in path.split(\"?\")[1].split(\"&\")} # \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 if \"?\" in path else None ) print(params) return HTTPRequest(method, path.split(\"?\")[0], headers, params) def handle_get_request(self, req): if req.path == '/': response_body = '<html><body><h1>List of subjects</h1><ul>{}</ul></body></html>' items = ''.join('<li>{} - {}</li>'.format(subject, grade) for subject, grade in zip(self.subjects, self.grades)) print(self.subjects) response_body = response_body.format(items) return self.create_response(200, 'OK', response_body) else: return self.create_response(404, 'Not Found', 'Page not found') def handle_post_request(self, req): if req.path == '/record': self.grades.append(req.params.get(\"grade\")) # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a self.subjects.append(req.params.get(\"subject\")) # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a print(self.subjects) return self.create_response(200, 'OK', 'Record saved') else: return self.create_response(404, 'Not Found', 'Page not found') def create_response(self, status_code, status_text, body): response = f\"HTTP/1.1 {status_code} {status_text}\\r\\n\" response += f\"Server: {self._server_name}\\r\\n\" response += \"Content-Type: text/html\\r\\n\" response += f\"Content-Length: {len(body)}\\r\\n\" response += \"\\r\\n\" response += body return response.encode('utf-8') def send_response(self, conn, resp): conn.sendall(resp) def send_error(self, conn, err): error_message = f\"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\nError: {err}\" conn.sendall(error_message.encode('utf-8')) class HTTPRequest: def __init__(self, method, path, headers, params): self.method = method # \u041c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.path = path # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.headers = headers # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 self.params = params # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 def read_body(self, length): body = b'' while len(body) < length: data = self.conn.recv(length - len(body)) if not data: break body += data return body.decode('utf-8') if __name__ == '__main__': host = 'localhost' port = 4000 name = 'test' serv = MyHTTPServer(host, port, name) print(\"Server listening on port\", port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"task5/#_3","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"}]}